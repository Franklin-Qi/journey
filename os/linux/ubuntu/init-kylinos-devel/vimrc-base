"==========================================
" Vim settings
"==========================================



" Command line settings
:cnoremap <C-A> <Home>
:cnoremap <C-F> <Right>
:cnoremap <C-B> <Left>
:cnoremap b <S-Left> "ctrl_v alt_b
:cnoremap f <S-Right>

" Common settings
set nobackup
set noswapfile
set noerrorbells
set wildmenu
set wildmode=longest:list,full
set ignorecase
set hlsearch
set incsearch
set number
set relativenumber
set ruler
set cursorline
""set cc=80

" fold
set foldenable
set foldmethod=syntax
set foldlevelstart=99
set foldcolumn=0
setlocal foldlevel=1
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>


" Ctags settings
""map <F3> <Esc>:TlistToggle<Cr>
""let Tlist_Use_Right_Window = 1
""let Tlist_Compart_Format = 1
""let Tlist_Auto_Open=1
""let Tlist_Show_One_File = 1
""let Tlist_Exit_OnlyWindow = 1
""let Tlist_Sort_Type = "name"
""set tags=tags;
""set tags=~/.vim/systags
" set autochdir

" Uncomment the following to have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Tab indent to 4
"highlight RedundantSpaces ctermbg=red guibg=red
"match RedundantSpaces /\s\+$\| \+\ze\t\|\t/
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Help documentation chinese
set helplang=cn
set encoding=utf-8

" Auto & smart indent
set smartindent
set autoindent

" Shortcut keybinding
:set pastetoggle=<F10>

" parentheses auto completion
:inoremap < <><Esc>i
:inoremap > <c-r>=ClosePair('>')<CR>
:inoremap ( ()<Esc>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap [ []<Esc>i
:inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap { {<CR>}<Esc>O
":inoremap } <c-r>=ClosePair('}')<CR>
:inoremap { {}<Esc>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap " ""<Esc>i
:inoremap ' ''<Esc>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

map ms :call Setparentheses()<CR>
func! Setparentheses()
    :inoremap < <><Esc>i
    :inoremap > <c-r>=ClosePair('>')<CR>
    :inoremap ( ()<Esc>i
    :inoremap ) <c-r>=ClosePair(')')<CR>
    :inoremap [ []<Esc>i
    :inoremap ] <c-r>=ClosePair(']')<CR>
    :inoremap { {<CR>}<Esc>O
    :inoremap } <c-r>=ClosePair('}')<CR>
    :inoremap " ""<Esc>i
    :inoremap ' ''<Esc>i
endfunc

map md :call Delparentheses()<CR>
func! Delparentheses()
    :inoremap < <
    :inoremap ( (
    :inoremap [ [
    :inoremap { {
    :inoremap " "
    :inoremap ' '
endfunc

" tablin
set tabline=%!MyTabLine()  " custom tab pages line
function MyTabLine()
    let s = '' " complete tabline goes here
    " loop through each tab page
    for t in range(tabpagenr('$'))
        " set highlight
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " set the tab page number (for mouse clicks)
        let s .= '%' . (t + 1) . 'T'
        let s .= ' '
        " set page number string
        let s .= t + 1 . ' '
        " get buffer names and statuses
        let n = ''      "temp string for buffer names while we loop and check buftype
        let m = 0       " &modified counter
        let bc = len(tabpagebuflist(t + 1))     "counter to avoid last ' '
        " loop through each buffer in a tab
        for b in tabpagebuflist(t + 1)
            " buffer types: quickfix gets a [Q], help gets [H]{base fname}
            " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
            if getbufvar( b, "&buftype" ) == 'help'
                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
            elseif getbufvar( b, "&buftype" ) == 'quickfix'
                let n .= '[Q]'
            else
                let n .= pathshorten(bufname(b))
            endif
            " check and ++ tab's &modified count
            if getbufvar( b, "&modified" )
                let m += 1
            endif
            " no final ' ' added...formatting looks better done later
            if bc > 1
                let n .= ' '
            endif
            let bc -= 1
        endfor
        " add modified label [n+] where n pages in tab are modified
        if m > 0
            let s .= '[' . m . '+]'
        endif
        " select the highlighting for the buffer names
        " my default highlighting only underlines the active tab
        " buffer names.
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " add buffer names
        if n == ''
            let s.= '[New]'
        else
            let s .= n
        endif
        " switch to no underlining and add final space to buffer list
        let s .= ' '
    endfor
    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'
    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLineFill#999Xclose'
    endif
    return s
endfunction



" complete python
autocmd BufNewFile *.py exec ":call SetTitlePy()"
func SetTitlePy()
    if &filetype == "python"
     call setline(1,"#!/usr/bin/env python3")
     call setline(2,"# -* - coding: UTF-8 -* -")
    endif
endfunc

map <F5> :call RunPython() <CR>
func! RunPython()
    exec "W"
    if &filetype == "python"
        exec "!time python3 %"
    endif

    if &filetype == "sh"
        exec "!time bash %"
    endif
endfunc

" complete bash
autocmd BufNewFile *.sh exec ":call SetTitleSh()"
func SetTitleSh()
    if &filetype == "sh"
     call setline(1,"#!/usr/bin/env bash")
     call setline(2,"# -* - coding: UTF-8 -* -")
    endif
endfunc


